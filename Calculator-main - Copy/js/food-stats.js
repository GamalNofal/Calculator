// ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ÿ∑ÿπŸÖÿ© ÿßŸÑÿ™Ÿä ÿ≥Ÿäÿ™ŸÖ ÿ≠ÿ≥ÿßÿ® ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™Ÿáÿß
const foodItems = [
    {
        id: 'burger',
        title: 'ÿßŸÑÿ®ÿ±ÿ¨ÿ± üçî',
        description: 'ŸÉŸÖ ÿ®ÿ±ÿ¨ÿ± ÿ™ÿ£ŸÉŸÑ ŸÅŸä ÿßŸÑÿ¥Ÿáÿ±ÿü',
        funFact: 'ŸáŸÑ ÿ™ÿπŸÑŸÖÿü ŸÑŸà Ÿàÿ∂ÿπÿ™ ŸÉŸÑ ÿßŸÑÿ®ÿ±ÿ¨ÿ± ÿßŸÑÿ∞Ÿä ÿ£ŸÉŸÑÿ™Ÿá ŸÅŸä ÿµŸÅ Ÿàÿßÿ≠ÿØÿå ÿ≥ŸäÿµŸÑ ÿ∑ŸàŸÑŸá ÿ•ŸÑŸâ {length} ŸÖÿ™ÿ±!',
        calories: 250,
        emoji: 'üçî'
    },
    {
        id: 'pizza',
        title: 'ÿßŸÑÿ®Ÿäÿ™ÿ≤ÿß üçï',
        description: 'ŸÉŸÖ ÿ®Ÿäÿ™ÿ≤ÿß ÿ™ÿ£ŸÉŸÑ ŸÅŸä ÿßŸÑÿ¥Ÿáÿ±ÿü',
        funFact: 'ŸàÿßŸà! ŸÑŸà ÿ¨ŸÖÿπÿ™ ŸÉŸÑ ÿßŸÑÿ®Ÿäÿ™ÿ≤ÿß ÿßŸÑÿ™Ÿä ÿ£ŸÉŸÑÿ™Ÿáÿßÿå ÿ≥ÿ™ÿ∫ÿ∑Ÿä ŸÖÿ≥ÿßÿ≠ÿ© {area} ŸÖÿ™ÿ± ŸÖÿ±ÿ®ÿπ!',
        calories: 285,
        emoji: 'üçï'
    },
    {
        id: 'coffee',
        title: 'ÿßŸÑŸÇŸáŸàÿ© ‚òï',
        description: 'ŸÉŸÖ ŸÉŸàÿ® ŸÇŸáŸàÿ© ÿ™ÿ¥ÿ±ÿ® ŸÅŸä ÿßŸÑŸäŸàŸÖÿü',
        funFact: 'ŸÖÿ∞ŸáŸÑ! ŸÑŸà ÿ¨ŸÖÿπÿ™ ŸÉŸÑ ÿßŸÑŸÇŸáŸàÿ© ÿßŸÑÿ™Ÿä ÿ¥ÿ±ÿ®ÿ™Ÿáÿßÿå ÿ≥ÿ™ŸÖŸÑÿ£ {cups} ÿ≠Ÿàÿ∂ ÿ≥ÿ®ÿßÿ≠ÿ© ÿµÿ∫Ÿäÿ±!',
        calories: 2,
        emoji: '‚òï'
    },
    {
        id: 'chocolate',
        title: 'ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© üç´',
        description: 'ŸÉŸÖ ŸÇÿ∑ÿπÿ© ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿ™ÿ£ŸÉŸÑ ŸÅŸä ÿßŸÑÿ£ÿ≥ÿ®Ÿàÿπÿü',
        funFact: 'ÿ±ÿßÿ¶ÿπ! ÿ®ŸÉŸÖŸäÿ© ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿßŸÑÿ™Ÿä ÿ£ŸÉŸÑÿ™Ÿáÿßÿå ŸäŸÖŸÉŸÜŸÉ ÿµŸÜÿπ ÿ™ŸÖÿ´ÿßŸÑ ÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ© ÿ®ÿßÿ±ÿ™ŸÅÿßÿπ {height} ÿ≥ŸÖ!',
        calories: 150,
        emoji: 'üç´'
    },
    {
        id: 'rice',
        title: 'ÿßŸÑÿ£ÿ±ÿ≤ üçö',
        description: 'ŸÉŸÖ ŸÖÿ±ÿ© ÿ™ÿ£ŸÉŸÑ ÿßŸÑÿ£ÿ±ÿ≤ ŸÅŸä ÿßŸÑÿ£ÿ≥ÿ®Ÿàÿπÿü',
        funFact: 'ŸáŸÑ ÿ™ÿπŸÑŸÖÿü ŸÉŸÖŸäÿ© ÿßŸÑÿ£ÿ±ÿ≤ ÿßŸÑÿ™Ÿä ÿ£ŸÉŸÑÿ™Ÿáÿß ÿ™ŸÉŸÅŸä ŸÑÿ™ÿ∫ÿ∞Ÿäÿ© {meals} ÿ¥ÿÆÿµ ŸÑŸÖÿØÿ© ŸäŸàŸÖ ŸÉÿßŸÖŸÑ!',
        calories: 130,
        emoji: 'üçö'
    }
];

// ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑÿµŸÅÿ≠ÿ© ÿπŸÜÿØ ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('foodStatsForm');
    const resultDiv = document.getElementById('result');
    const progressBar = document.querySelector('.progress-bar');
    let userAnswers = {};

    let currentQuestionIndex = 0;
    const questions = [
        {
            question: "ŸÉŸÖ Ÿàÿ¨ÿ®ÿ© ÿ™ÿ£ŸÉŸÑ ŸÅŸä ÿßŸÑŸäŸàŸÖ ÿπÿßÿØÿ©Ÿãÿü",
            options: ["1-2", "3-4", "5+"],
            weight: { healthNut: [0, 1, 0], foodie: [0, 0, 1], traditional: [1, 0, 0] }
        },
        {
            question: "ŸáŸÑ ÿ™ŸÅÿ∂ŸÑ ÿßŸÑÿ∑ÿπÿßŸÖ ÿßŸÑÿ≠ÿßÿ±ÿü",
            options: ["ŸÜÿπŸÖÿå ŸÉÿ´Ÿäÿ±ÿßŸã! üå∂Ô∏è", "ÿ£ÿ≠ŸäÿßŸÜÿßŸã", "ŸÑÿß ÿ£ÿ≠ÿ® ÿßŸÑÿ≠ÿßÿ±"],
            weight: { healthNut: [0, 1, 0], foodie: [1, 0, 0], traditional: [0, 0, 1] }
        },
        {
            question: "ŸÉŸÖ ŸÖÿ±ÿ© ÿ™ÿ∑ŸÑÿ® ÿ∑ÿπÿßŸÖÿßŸã ŸÖŸÜ ÿßŸÑŸÖÿ∑ÿßÿπŸÖ ÿ£ÿ≥ÿ®ŸàÿπŸäÿßŸãÿü",
            options: ["ŸÜÿßÿØÿ±ÿßŸã", "1-3 ŸÖÿ±ÿßÿ™", "4+ ŸÖÿ±ÿßÿ™"],
            weight: { healthNut: [1, 0, 0], foodie: [0, 0, 1], traditional: [0, 1, 0] }
        },
        {
            question: "ŸáŸÑ ÿ™ÿ£ŸÉŸÑ ÿßŸÑÿÆÿ∂ÿ±Ÿàÿßÿ™ ÿ®ÿßŸÜÿ™ÿ∏ÿßŸÖÿü",
            options: ["ŸÜÿπŸÖÿå ŸäŸàŸÖŸäÿßŸã", "ÿ£ÿ≠ŸäÿßŸÜÿßŸã", "ŸÜÿßÿØÿ±ÿßŸã"],
            weight: { healthNut: [1, 0, 0], foodie: [0, 1, 0], traditional: [0, 0, 1] }
        },
        {
            question: "ŸÖÿß ŸáŸà ŸàŸÇÿ™ ÿßŸÑŸàÿ¨ÿ®ÿ© ÿßŸÑŸÖŸÅÿ∂ŸÑ ŸÑÿØŸäŸÉÿü",
            options: ["ÿßŸÑŸÅÿ∑Ÿàÿ±", "ÿßŸÑÿ∫ÿØÿßÿ°", "ÿßŸÑÿπÿ¥ÿßÿ°"],
            weight: { healthNut: [1, 0, 0], foodie: [0, 1, 0], traditional: [0, 0, 1] }
        }
    ];

    const foodProfiles = {
        healthNut: {
            title: "ÿπÿßÿ¥ŸÇ ÿßŸÑÿµÿ≠ÿ©! ü•ó",
            description: "ÿ£ŸÜÿ™ ÿ™Ÿáÿ™ŸÖ ŸÉÿ´Ÿäÿ±ÿßŸã ÿ®ÿµÿ≠ÿ™ŸÉ Ÿàÿ™ÿÆÿ™ÿßÿ± ÿ∑ÿπÿßŸÖŸÉ ÿ®ÿπŸÜÿßŸäÿ©. ÿßÿ≥ÿ™ŸÖÿ± ŸáŸÉÿ∞ÿß!",
            recommendations: [
                "ÿ¨ÿ±ÿ® ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿßŸÑÿ®ÿ∞Ÿàÿ± ŸàÿßŸÑŸÖŸÉÿ≥ÿ±ÿßÿ™ ÿ•ŸÑŸâ Ÿàÿ¨ÿ®ÿßÿ™ŸÉ",
                "ÿßÿ≥ÿ™ŸÖÿ™ÿπ ÿ®ÿ™ŸÜÿßŸàŸÑ ÿßŸÑŸÅŸàÿßŸÉŸá ÿßŸÑÿ∑ÿßÿ≤ÿ¨ÿ© ŸÉŸàÿ¨ÿ®ÿßÿ™ ÿÆŸÅŸäŸÅÿ©",
                "ÿßÿ¥ÿ±ÿ® ÿßŸÑŸÖÿßÿ° ÿ®ŸÉÿ´ÿ±ÿ© ÿ®ŸäŸÜ ÿßŸÑŸàÿ¨ÿ®ÿßÿ™"
            ],
            emoji: "ü•ó"
        },
        foodie: {
            title: "ÿπÿßÿ¥ŸÇ ÿßŸÑÿ∑ÿπÿßŸÖ! üçï",
            description: "ÿ£ŸÜÿ™ ÿ™ÿ≥ÿ™ŸÖÿ™ÿπ ÿ®ÿ™ÿ¨ÿ±ÿ®ÿ© ÿ£ÿµŸÜÿßŸÅ ŸÖÿÆÿ™ŸÑŸÅÿ© ŸÖŸÜ ÿßŸÑÿ∑ÿπÿßŸÖ Ÿàÿ™ŸÇÿØÿ± ÿßŸÑŸÜŸÉŸáÿßÿ™ ÿßŸÑŸÖÿ™ŸÜŸàÿπÿ©.",
            recommendations: [
                "ÿ¨ÿ±ÿ® ÿßŸÑŸÖÿ∑ÿßÿπŸÖ ÿßŸÑÿ™Ÿä ÿ™ŸÇÿØŸÖ ÿ£ÿ∑ÿ®ÿßŸÇÿßŸã ŸÖŸÜ ŸÖÿÆÿ™ŸÑŸÅ ÿßŸÑÿ´ŸÇÿßŸÅÿßÿ™",
                "ÿ™ÿπŸÑŸÖ ÿ∑ÿ®ÿÆ ÿ£ÿ∑ÿ®ÿßŸÇ ÿ¨ÿØŸäÿØÿ© ŸÅŸä ÿßŸÑŸÖŸÜÿ≤ŸÑ",
                "ÿ¥ÿßÿ±ŸÉ ÿ™ÿ¨ÿßÿ±ÿ®ŸÉ ÿßŸÑÿ∫ÿ∞ÿßÿ¶Ÿäÿ© ŸÖÿπ ÿßŸÑÿ£ÿµÿØŸÇÿßÿ°"
            ],
            emoji: "üçï"
        },
        traditional: {
            title: "ŸÖÿ≠ÿ® ŸÑŸÑÿ™ŸÇŸÑŸäÿØŸä! üçñ",
            description: "ÿ£ŸÜÿ™ ÿ™ŸÅÿ∂ŸÑ ÿßŸÑÿ£ÿ∑ÿ®ÿßŸÇ ÿßŸÑÿ™ŸÇŸÑŸäÿØŸäÿ© ŸàÿßŸÑŸÖÿ£ŸÑŸàŸÅÿ©. ŸÑÿß ÿ®ÿ£ÿ≥ ŸÅŸä ÿ∞ŸÑŸÉ!",
            recommendations: [
                "ÿ≠ÿßŸàŸÑ ÿ•ÿ∂ÿßŸÅÿ© ŸÜŸÉŸáÿßÿ™ ÿ¨ÿØŸäÿØÿ© ÿ•ŸÑŸâ ÿ£ÿ∑ÿ®ÿßŸÇŸÉ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©",
                "ÿ¨ÿ±ÿ® ÿ™ŸÜÿßŸàŸÑ ÿßŸÑÿÆÿ∂ÿ±Ÿàÿßÿ™ ÿ®ÿ∑ÿ±ŸÇ ŸÖÿÆÿ™ŸÑŸÅÿ©",
                "ÿßÿ≥ÿ™ŸÖÿ™ÿπ ÿ®ÿßŸÑŸàÿ¨ÿ®ÿßÿ™ ÿßŸÑÿπÿßÿ¶ŸÑŸäÿ© ÿßŸÑÿ™ŸÇŸÑŸäÿØŸäÿ©"
            ],
            emoji: "üçñ"
        }
    };

    function showQuestion(index) {
        const questionContainer = document.getElementById('questionContainer');
        if (index >= questions.length) {
            calculateAndShowResults();
            return;
        }

        const question = questions[index];
        const progressPercentage = (index / questions.length) * 100;
        progressBar.style.width = `${progressPercentage}%`;
        progressBar.setAttribute('aria-valuenow', progressPercentage);

        let html = `
            <div class="question-slide">
                <h3 class="mb-4">${question.question}</h3>
                <div class="options-container">
        `;

        question.options.forEach((option, i) => {
            html += `
                <div class="form-check custom-option mb-3">
                    <input class="form-check-input" type="radio" name="question${index}" id="option${i}" value="${i}" required>
                    <label class="form-check-label" for="option${i}">
                        ${option}
                    </label>
                </div>
            `;
        });

        html += `
                </div>
                <button type="submit" class="btn btn-primary w-100 mt-4">
                    ${index === questions.length - 1 ? 'ÿßÿπÿ±ÿ∂ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨! üéâ' : 'ÿßŸÑÿ™ÿßŸÑŸä ‚è≠Ô∏è'}
                </button>
            </div>
        `;

        questionContainer.innerHTML = html;
        
        // Add animation
        const questionSlide = questionContainer.querySelector('.question-slide');
        questionSlide.style.animation = 'slideIn 0.5s ease-out';
    }

    function handleAnswer(e) {
        e.preventDefault();
        const selectedOption = document.querySelector(`input[name="question${currentQuestionIndex}"]:checked`);
        if (!selectedOption) return;

        userAnswers[currentQuestionIndex] = parseInt(selectedOption.value);
        
        const questionSlide = document.querySelector('.question-slide');
        questionSlide.style.animation = 'slideOut 0.5s ease-out';
        
        setTimeout(() => {
            currentQuestionIndex++;
            if (currentQuestionIndex < questions.length) {
                showQuestion(currentQuestionIndex);
            } else {
                calculateAndShowResults();
            }
        }, 400);
    }

    function calculateFoodProfile() {
        const scores = {
            healthNut: 0,
            foodie: 0,
            traditional: 0
        };

        // Calculate scores based on answers and weights
        Object.entries(userAnswers).forEach(([questionIndex, answer]) => {
            const question = questions[questionIndex];
            Object.entries(question.weight).forEach(([profile, weights]) => {
                scores[profile] += weights[answer];
            });
        });

        // Find the profile with highest score
        const maxScore = Math.max(...Object.values(scores));
        const profile = Object.entries(scores).find(([_, score]) => score === maxScore)[0];
        
        return {
            ...foodProfiles[profile],
            scores: Object.entries(scores).map(([name, score]) => ({
                name: foodProfiles[name].title,
                score: (score / Object.keys(userAnswers).length) * 100
            }))
        };
    }

    function calculateFoodStats() {
        const monthsInYear = 12;
        const weeksInYear = 52;
        const daysInYear = 365;
        
        // Example calculations based on average consumption
        return {
            burgers: Math.round(Math.random() * 50 + 20) * monthsInYear,
            pizzaArea: Math.round(Math.random() * 30 + 10),
            coffeeCups: Math.round(Math.random() * 500 + 200) * daysInYear,
            chocolateHeight: Math.round(Math.random() * 100 + 50),
            caloriesPerYear: Math.round(Math.random() * 500000 + 300000)
        };
    }

    function calculateAndShowResults() {
        const profile = calculateFoodProfile();
        const stats = calculateFoodStats();
        
        const resultDiv = document.getElementById('result');
        resultDiv.innerHTML = `
            <div class="result-container">
                <div class="profile-section text-center mb-5">
                    <div class="profile-emoji mb-3">${profile.emoji}</div>
                    <h2 class="mb-3">${profile.title}</h2>
                    <p class="lead mb-4">${profile.description}</p>
                    
                    <div class="profile-scores mb-4">
                        ${profile.scores.map(score => `
                            <div class="score-bar mb-3">
                                <div class="score-label">${score.name}</div>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" 
                                         style="width: ${score.score}%" 
                                         aria-valuenow="${score.score}" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        ${Math.round(score.score)}%
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>

                <div class="stats-section mb-5">
                    <h3 class="text-center mb-4">ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ŸÖÿ´Ÿäÿ±ÿ©! üìä</h3>
                    <div class="row g-4">
                        <div class="col-md-6">
                            <div class="stat-card">
                                <div class="stat-emoji">üçî</div>
                                <div class="stat-value">${stats.burgers}</div>
                                <div class="stat-label">ÿ®ÿ±ÿ¨ÿ± ŸÅŸä ÿßŸÑÿ≥ŸÜÿ©</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="stat-card">
                                <div class="stat-emoji">üçï</div>
                                <div class="stat-value">${stats.pizzaArea}</div>
                                <div class="stat-label">ŸÖÿ™ÿ± ŸÖÿ±ÿ®ÿπ ŸÖŸÜ ÿßŸÑÿ®Ÿäÿ™ÿ≤ÿß</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="stat-card">
                                <div class="stat-emoji">‚òï</div>
                                <div class="stat-value">${stats.coffeeCups}</div>
                                <div class="stat-label">ŸÉŸàÿ® ŸÇŸáŸàÿ© ŸÅŸä ÿßŸÑÿ≥ŸÜÿ©</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="stat-card">
                                <div class="stat-emoji">üî•</div>
                                <div class="stat-value">${(stats.caloriesPerYear / 1000).toFixed(1)}K</div>
                                <div class="stat-label">ÿ≥ÿπÿ±ÿ© ÿ≠ÿ±ÿßÿ±Ÿäÿ© ŸÅŸä ÿßŸÑÿ≥ŸÜÿ©</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="recommendations-section mb-5">
                    <h3 class="text-center mb-4">ÿ™ŸàÿµŸäÿßÿ™ ÿÆÿßÿµÿ© ŸÑŸÉ üåü</h3>
                    <div class="recommendations-list">
                        ${profile.recommendations.map(rec => `
                            <div class="recommendation-item">
                                <i class="bi bi-check-circle-fill"></i>
                                <span>${rec}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>

                <div class="text-center mt-4">
                    <button onclick="resetQuiz()" class="btn btn-primary btn-lg">
                        ÿ¨ÿ±ÿ® ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ! üîÑ
                    </button>
                    <button onclick="shareResults()" class="btn btn-outline-primary btn-lg ms-2">
                        ÿ¥ÿßÿ±ŸÉ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨! üîó
                    </button>
                </div>
            </div>
        `;
        
        document.getElementById('foodStatsForm').style.display = 'none';
        resultDiv.style.display = 'block';
        
        // Animate progress bars
        setTimeout(() => {
            document.querySelectorAll('.progress-bar').forEach(bar => {
                bar.style.transition = 'width 1s ease-out';
                bar.style.width = bar.getAttribute('aria-valuenow') + '%';
            });
        }, 100);
    }

    function resetQuiz() {
        currentQuestionIndex = 0;
        userAnswers = {};
        document.getElementById('foodStatsForm').style.display = 'block';
        document.getElementById('result').style.display = 'none';
        showQuestion(0);
    }

    function shareResults() {
        // Implement sharing functionality
        alert('ŸÇÿ±Ÿäÿ®ÿßŸã! ÿ≥Ÿäÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿÆÿßÿµŸäÿ© ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ŸÅŸä ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÇÿßÿØŸÖ üîú');
    }

    // ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ±
    showQuestion(0);
    form.addEventListener('submit', handleAnswer);
});
